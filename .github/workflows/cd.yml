name: CD - Build and Deploy

on:
  push:
    branches: ["main"]
  workflow_dispatch:
    inputs:
      tag:
        description: "Custom tag for the Docker image"
        required: false
        default: "latest"

permissions:
  contents: read

jobs:
  # Wait for CI to complete before deploying
  wait-for-ci:
    runs-on: ubuntu-latest
    steps:
      - name: Wait for CI workflow
        uses: lewagon/wait-on-check-action@v1.3.4
        with:
          ref: ${{ github.ref }}
          check-name: "lint_and_build"
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 10

  # Build and push Docker image
  build-and-push:
    needs: wait-for-ci
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ vars.DOCKER_IMAGE_NAME || 'calculaud-fe' }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ github.event.inputs.tag }},enable=${{ github.event_name == 'workflow_dispatch' }}
            type=raw,value=main-{{date 'YYYYMMDD-HHmmss'}},enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Image digest
        run: echo ${{ steps.build.outputs.digest }}

  # Deploy to EKS using Helm
  deploy-to-eks:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'  # Only deploy main branch automatically
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ vars.AWS_REGION || 'us-east-1' }} --name ${{ vars.EKS_CLUSTER_NAME }}

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: '3.14.0'

      - name: Deploy with Helm
        run: |
          # Set image tag from the build
          IMAGE_TAG="${GITHUB_SHA::7}"
          
          # Deploy to staging environment
          helm upgrade --install calculaud-fe-staging ./k8s/helm/calculaud-fe \
            --namespace ${{ vars.K8S_NAMESPACE || 'calculaud' }} \
            --create-namespace \
            --set image.tag=${IMAGE_TAG} \
            --set platform=eks \
            --set environment.name=staging \
            --set ingress.groupOrder=10 \
            --set ingress.hosts[0].host="${{ vars.STAGING_HOST || 'calculaud-staging.internal' }}" \
            --set ingress.hosts[0].paths[0].path=/ \
            --set ingress.hosts[0].paths[0].pathType=Prefix \
            --set runtime.apiBaseUrl="${{ vars.STAGING_API_URL || 'https://calcloud-api-staging.up.railway.app/api/v1' }}" \
            --set runtime.authAuthority="${{ secrets.STAGING_AUTH_AUTHORITY }}" \
            --set runtime.authClientId="${{ secrets.STAGING_AUTH_CLIENT_ID }}" \
            --set runtime.authRedirectUri="https://${{ vars.STAGING_HOST || 'calculaud-staging.internal' }}/" \
            --wait --timeout=10m

      - name: Verify deployment
        run: |
          kubectl get pods -n ${{ vars.K8S_NAMESPACE || 'calculaud' }} -l app.kubernetes.io/name=calculaud-fe
          kubectl get ingress -n ${{ vars.K8S_NAMESPACE || 'calculaud' }} calculaud-fe-staging
