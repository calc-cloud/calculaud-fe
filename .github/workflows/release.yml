name: Release

on:
  release:
    types: [published]

permissions:
  contents: write

jobs:
  # Wait for CI to complete before releasing
  wait-for-ci:
    runs-on: ubuntu-latest
    steps:
      - name: Wait for CI workflow
        uses: lewagon/wait-on-check-action@v1.3.4
        with:
          ref: ${{ github.ref }}
          check-name: "lint_and_build"
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 10

  # Build and push Docker image with release tags
  build-and-push:
    needs: wait-for-ci
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract version from tag
        id: version
        run: |
          # Extract version from tag (e.g., v1.0.0 -> 1.0.0)
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "version_number=${VERSION#v}" >> $GITHUB_OUTPUT

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ vars.DOCKER_IMAGE_NAME || 'calculaud-fe' }}
          tags: |
            type=ref,event=tag
            type=raw,value=latest
            type=raw,value=${{ steps.version.outputs.version_number }}
            type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          build-args: |
            VERSION=${{ steps.version.outputs.version_number }}

      - name: Export Docker image tar
        run: |
          # Pull the image first (since buildx doesn't keep it locally)
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ vars.DOCKER_IMAGE_NAME || 'calculaud-fe' }}:${{ steps.version.outputs.version }}

          # Export Docker image as compressed tar
          docker save ${{ secrets.DOCKERHUB_USERNAME }}/${{ vars.DOCKER_IMAGE_NAME || 'calculaud-fe' }}:${{ steps.version.outputs.version }} | gzip > calculaud-fe-${{ steps.version.outputs.version }}.tar.gz

          # Get file size for summary
          FILE_SIZE=$(ls -lh calculaud-fe-${{ steps.version.outputs.version }}.tar.gz | awk '{print $5}')
          echo "DOCKER_TAR_SIZE=$FILE_SIZE" >> $GITHUB_ENV

      - name: Generate release body
        id: release_body
        run: |
          # Create release body content
          cat > release_body.md << 'EOF'
          ## 🚀 Release Summary
          **Version:** ${{ steps.version.outputs.version }}

          ### 🐳 Docker Images Published:
          - `${{ secrets.DOCKERHUB_USERNAME }}/${{ vars.DOCKER_IMAGE_NAME || github.event.repository.name }}:${{ steps.version.outputs.version }}`
          - `${{ secrets.DOCKERHUB_USERNAME }}/${{ vars.DOCKER_IMAGE_NAME || github.event.repository.name }}:${{ steps.version.outputs.version_number }}`
          - `${{ secrets.DOCKERHUB_USERNAME }}/${{ vars.DOCKER_IMAGE_NAME || github.event.repository.name }}:latest`

          ### 📦 Docker Image Archive:
          - **Size:** ${{ env.DOCKER_TAR_SIZE }}
          - **Download:** Available as release asset

          ### 🔧 Usage:
          ```bash
          # Download from GitHub releases and load
          # First download the tar.gz file from the release assets
          gunzip calculaud-fe-${{ steps.version.outputs.version }}.tar.gz
          docker load < calculaud-fe-${{ steps.version.outputs.version }}.tar
          ```

          **Platforms:** linux/amd64
          EOF

          # Set the release body content as output
          echo "content<<EOF" >> $GITHUB_OUTPUT
          cat release_body.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Upload tar to GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: calculaud-fe-${{ steps.version.outputs.version }}.tar.gz
          tag_name: ${{ steps.version.outputs.version }}
          body: ${{ steps.release_body.outputs.content }}
          append_body: true

  # Deploy to EKS Production using Helm
  deploy-to-production:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: production  # Require manual approval for production deployments
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "version_number=${VERSION#v}" >> $GITHUB_OUTPUT

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ vars.AWS_REGION || 'us-east-1' }} --name ${{ vars.EKS_CLUSTER_NAME }}

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: '3.14.0'

      - name: Deploy to Production with Helm
        run: |
          # Deploy to production environment
          helm upgrade --install calculaud-fe-production ./k8s/helm/calculaud-fe \
            --namespace ${{ vars.K8S_NAMESPACE || 'calculaud' }} \
            --create-namespace \
            --set image.tag=${{ steps.version.outputs.version }} \
            --set platform=eks \
            --set environment.name=production \
            --set ingress.groupOrder=10 \
            --set ingress.hosts[0].host="${{ vars.PRODUCTION_HOST }}" \
            --set ingress.hosts[0].paths[0].path=/ \
            --set ingress.hosts[0].paths[0].pathType=Prefix \
            --set runtime.apiBaseUrl="${{ vars.PRODUCTION_API_URL }}" \
            --set runtime.authAuthority="${{ secrets.PRODUCTION_AUTH_AUTHORITY }}" \
            --set runtime.authClientId="${{ secrets.PRODUCTION_AUTH_CLIENT_ID }}" \
            --set runtime.authRedirectUri="https://${{ vars.PRODUCTION_HOST }}/" \
            --set autoscaling.enabled=true \
            --set autoscaling.minReplicas=3 \
            --set autoscaling.maxReplicas=10 \
            --set resources.requests.memory=256Mi \
            --set resources.requests.cpu=200m \
            --set resources.limits.memory=512Mi \
            --set resources.limits.cpu=500m \
            --wait --timeout=15m

      - name: Verify production deployment
        run: |
          kubectl get pods -n ${{ vars.K8S_NAMESPACE || 'calculaud' }} -l app.kubernetes.io/name=calculaud-fe
          kubectl get ingress -n ${{ vars.K8S_NAMESPACE || 'calculaud' }} calculaud-fe-production
